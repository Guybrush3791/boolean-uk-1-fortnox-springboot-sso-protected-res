openapi: 3.1.0

info:
  title: Student API
  description: API for managing student records
  version: 1.0.0
  contact:
    name: Student Management System

servers:
  - url: http://localhost:4000

tags:
  - name: students

paths:
  /api/public/student:
    get:
      tags:
        - students
      summary: Get all students
      description: Get all students in the system
      operationId: getAllStudents
      responses:
        '200':
          description: Successfully retrieved all students
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllStudents'

  /api/public/student/{id}:
    get:
      tags:
        - students
      summary: Get student by ID
      description: Get a specific student by their ID
      operationId: getStudentById
      parameters:
        - name: id
          in: path
          description: The ID of the student to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved the student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: "No student with that ID was found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

  /api/student:
    post:
      tags:
        - students
      summary: Create student
      description: Create a new student
      operationId: createStudent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudent'
      responses:
        '201':
          description: Successfully created a new student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: "Could not create student, please check all required fields are correct."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'

  /api/student/{id}:
    put:
      tags:
        - students
      summary: Update student
      description: Update an existing student
      operationId: updateStudent
      parameters:
        - name: id
          in: path
          description: The ID of the student to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudent'
      responses:
        '201':
          description: Successfully updated the student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: "Could not update the student, please check all required fields are correct."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: "No student with that ID was found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

    delete:
      tags:
        - students
      summary: Delete student
      description: Delete a student by ID
      operationId: deleteStudent
      parameters:
        - name: id
          in: path
          description: The ID of the student to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: "No student with that ID was found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

components:
  schemas:
    CreateStudent:
      type: object
      required: [first_name, last_name, email, retired]
      properties:
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john.doe@university.edu"
        retired:
          type: boolean
          example: true

    Student:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john.doe@university.edu"
        retired:
          type: boolean
          example: true

    AllStudents:
      type: array
      items:
        $ref: '#/components/schemas/Student'

    Error400:
      type: object
      properties:
        message:
          type: string
          example: "bad request"

    Error404:
      type: object
      properties:
        message:
          type: string
          example: "not found"
